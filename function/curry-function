#### 柯里化
* 使用柯里化解决上一个案例中编码的问题

let min = 18;
```js
function checkAge (age) {
     return age >= min
}
```

```js
function checkAge (age) {
    let min = 18; // 硬编码问题
    return age >= min
}
```

// 普通纯函数

```js
function checkAge (min, age) {
    return age >= min
}

checkAge(18, 24);
checkAge(18, 20);
checkAge(20, 30);
```

// 柯里化

```js
function checkAge (min) {
    return function (age) {
        return age >= min;
    }
}

let checkAge18 = checkAge(18);
let checkAge20 = checkAge(20);
console.log(checkAge18(20));
console.log(checkAge18(24));
```
// 柯里化（箭头函数）
```js
let checkAge = min => (age => age => min)
```


* 柯里化
    * 当一个函数有多个参数的时候先传递一部分参数调用它(这部分参数以后永远不变)
    * 然后返回一个新的函数接收剩余的参数，返回结果


#### Lodash中的柯里化
// lodash 中的 curry 基本使用
// 柯里化可以把任意多元函数转换为一元函数
Lodash中的柯里化函数

* _.curry(function)
    * 功能： 创建一个函数，该函数接收一个或多个func的参数，如果func所需要的参数都被提供则执行func并返回
        执行结果。否则继续返回该函数并等待接收剩余的参数。
    * 参数： 需要柯里化的函数
    * 返回值： 柯里化后的函数

```js
const _ = require('lodash');
// 要柯里化的函数
function getSum (a, b, c) {
    return a + b + c;
}

// 柯里化后的函数
let curried = _.lodash(getSum);

// 测试
curried(1, 2, 3);
curried(1)(2)(3);
curried(1, 2)(3);
```

// 柯里化案例
// ''.match(/\s+/g) 提取出所有空格
// ''.match(/\d+/g) 提取所有数字
// 纯函数
```js
    function match (reg, str) {
        return str.match(reg);
    }
```

```js
const _ = require('lodash');

const match = _.curry(function (reg, str) {
    return str.match(reg);
});

const haveSpace = match(/\s+/g);

console.log(haveSpace('Heelo world'));


const filter = _curry(function (func, arry) {
    return array.filter(func)
})

console.log(filter(haveSpace, ['John Connor', 'John_Donne']));


const findSpace = filter(haveSpace)

console.log(findSpace(['John Connor', 'John_Donne']));

```

```js

```



